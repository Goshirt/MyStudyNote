指定端口启动redis服务端,默认启动时6379
    redis-server -port 10008
停止redis
    redis-cli SHUTDOWN
启动redis客户端
    redis-cli            进入redis命令交互模式
通过配置文件启动redisu服务端，可以将配置问件的路径作为参数附加在redis-server
    redis-server/路径
    config get key       获取配置文件中key的value值
    config set key value 动态设置配置
redis默认16个数据库（可通过配置参数database来修改），默认启动名为0的数据库通过select 2可选择2号数据库

redis有五种数据类型：1.string(字符串)、2.hash(散列类型)、3.list(列表类型)、4.set(集合类型)、5.zset(有序集合类型)

 字符串类型：
    set key value        设置一个键值对
    keys *               获取当前数据库的所有的key
    exists key           判断key是否存在，存在就返回1，不存在返回0
    del key [key2,key3]  删除一个或者多个key
    type key             获取key对应的value的类型值
    incr key             自增1，当key代表的value不是数值类型时，报错
    decr key             自减1
    incrby key incrNum   按照指定的incrNum增加
    decrby key decrNum   按照指定的decrNum减少
    append key value     在key原来的值后面追加value,如果原来的key不存在，相当于set key value
    strlen key           返回key对应的value的长度
    mget key [key2 key3] 同时获取多个key对应的value值
    mset key value [key2,value2 key3 value3]  同时设置多个key-value

 散列类型：
    hset key field value  设置一个只有字段的散列列表，如果key已经存在，就追加，如果该filed已经存在，就更新value值
    hmset key field value [field value]  设置一个拥有一个或者多个字段的散列列表
    hget key field        获取key的字段field的value值
    hmget key field [field] 获取key字段的一个或者多个filed的value值
    hgetall key           返回key的所有filed及对应的value
    hexists key fieldd     判断是否存在字段field
    hsetnx key field      当field本来不存在时设值，存在的话不进行任何操作
    hincrby key field num  使field字段的值增加num,如果key不存在，会创建
    hdel key field [field] 删除一个或者多个field
    hkeys key              获取key的所有字段名
    hvals key              获取key的所有字段对应的value值
    
    
  列表（使用的是双向链表）：
    lpush key value [value]  在列表key的左边增加一个或者多个元素
    rpush key value [value]  在列表key的右边增加一个或者多个元素
    lpop key                 在列表key的左边弹出一个元素（删除）
    rpop key                 在列表key的右边弹出一个元素（删除）
    llen key                 获取列表key的元素个数，当列表不存在时返回0
    lrange key start end     获取列表中指定范围的的数据集，列表索引从0开始，当start或者end为负数时，表示从右边开始数相应的单位
    lrem key count value     删除列表key中count个出现的value值，当count>0从左边开始，当count<0，从右边开始，当count=0,删除所有
    lindex key index         获取列表key中索引为index的值
    lset key index value     在列表key中的索引index位置设置值为value
    ltrim key start end      删除列表key中指定范围以外的所有数据
    linsert key before|after value value2 在列表key中的value的前面或者后面插入value2
    rpoplpush source destination   把source列表转移到destination列表，从source最右边弹出一个元素，从destination最左边加入一个，每次返回该元素的值
    
  集合：
    sadd key value [value]   在集合key中添加一个或者多个值，如果不存在key则创建一个
    sremk key value [value]  在集合key中删除一个或者多个值
    smembers key             获取集合key的所有值
    scard key                获取集合key的元素个数
    sismember key member     判断集合key中是否存在元素member
    sdiff setA setB [setC]   去掉集合A中出现在集合B中的元素，多个集合时，依次去掉
    sinter setA setB [setC]  求两个或者多个集合的交集
    sunion setA setB [setC]  求两个或者多个集合的并集
    sdiffstore destination key key2 [key3] 求两个或者多个集合的差集并结果存在destination集合中
    sinterstore destination key key2 [key3] 求两个或者多个集合的交集并将结果存在destination集合中
    sunion destination key key2 [key3] 求两个或者多个集合的并集并将结果存在destination集合中
    srandmember key [count]  随机获取集合中的一个元素，当指定count个数时，随机获取count个元素
    spop key                 从集合中弹出一个元素
    
    
  有序集合（在集合的基础上为每一个元素加上了一个分数）：
    zadd key score member [score member]  在有序集合中添加一个或者多个元素以及该元素的分数，如果该key不存在则创建，如果该元素存在则更新分数
    zscore key member                     获取指定元素的分数
    zrange ket start stop [withscores]    按照元素分数从小到大的顺序返回下标start-stop范围的元素，下标从0开始，包含start，stop,
                                          加上withscores时返回该元素的分数
    ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]   按照元素分数从小到大的顺序返回分数在min和max之间（包含min和max）的元素
                                                                  分数范围不包含端点值，可以在分数前加上“(”符号，
                                                                  -inf 和+inf分别表示负无穷和正无穷
                                                                  limit同sql的用法
    ZRANGEBYSCORE scoreboard 80 (100                       可以含80分，但不包含100分
    ZRANGEBYSCORE scoreboard (80 +inf                      得到所有分数高于80分（不包含80分）的人的名单
    ZINCRBY key increment member                           给指定的key中的member元素增加increment分数
    ZCARD key                             获得集合中元素的数量
    ZCOUNT key min max                    获得指定分数范围內的元素个数
    ZREM key member [member …]            删除一个或多个元素
    ZREMRANGEBYRANK key start stop        按照元素分数从小到大的顺序（即索引0表示最小的值）删除处在指定排名范围内的所有元素
    ZREMRANGEBYSCORE key min max          删除指定分数范围内的所有元素
    ZRANK key member                      获得元素的排名，从小到大的排名
    ZREVRANK key member                   获得元素的排名，从大到小的排名
    
    
    
    事务（不支持回滚）
    redis＞MULTI                          开启事务，接下来的操作属于同一个事务
    redis＞EXEC                           执行事务
    redis＞WATCH key                      WATCH命令可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行
                                          监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）
    
    时效：
    EXPIRE key seconds                    设置一个键的生存时间，单位是秒
    TTL key                               返回一个失效键剩余时间
    PERSIST key                           取消一个键设置的生存时间，使用SET或GETSET命令为键赋值也会同时清除键的生存时间
    
    为了减轻服务器的压力，需要限制每个用户（以IP计）一段时间的最大访问量：
    思路（1）是对每个用户使用一个名为“rate.limiting:用户IP”的字符串类型键，每次用户访问则使用INCR命令递增该键的键值，
    如果递增后的值是1（第一次访问页面），则同时还要设置该键的生存时间为1分钟。这样每次用
    户访问页面时都读取该键的键值，如果超过了100就表明该用户的访问频率超过了限制，需要
    提示用户稍后访问。该键每分钟会自动被删除，所以下一分钟用户的访问次数又会重新计算，
    也就达到了限制访问频率的目的。
    isKeyExists=EXISTS rate.limiting: IP
    if isKeyExists is 1
        times=INCR rate.limiting: IP
    if times＞100
        print访问频率超过了限制，请稍后再试。
        exit
    else
        MULTI
        INCR rate.limiting: IP
        EXPIRE keyName, 60
        EXEC
    
    （2）粒度更小的控制方案。如果要精确地保证每分钟最多访问10次，需要记录下用户每次访问的时间。
    因此对每个用户，我们使用一个列表类型的键来记录他最近10次访问博客的时间。一旦键
    中的元素超过10个，就判断时间最早的元素距现在的时间是否小于1分钟。如果是则表示用户
    最近1分钟的访问次数超过了10次；如果不是就将现在的时间加入到列表中，同时把最早的元素删除。
        listLength=LLEN rate.limiting: IP
        if listLength＜10
            LPUSH rate.limiting: IP, now()
        else
            time=LINDEX rate.limiting: IP, -1
            if now()- time＜60
                print访问频率超过了限制，请稍后再试。
            else
                LPUSH rate.limiting: IP, now()
                LTRIM rate.limiting: IP, 0, 9
                
      （3）教务网站要对全校所有学生的各个科目的成绩汇总排名，并在首页上显示前10名的学生姓名，由于计算过程较耗资源，
      所以可以将结果使用一个Redis的字符串键缓存起来。由于学生成绩总在不断地变化，需要每隔两个小时就重新计算一次排名，
      这可以通过给键设置生存时间的方式实现。每次用户访问首页时程序先查询缓存键是否存在，如果存在则直接使用缓存的值；
      否则重新计算排名并将计算结果赋值给该键并同时设置该键的生存时间为两个小时。
            rank=GET cache:rank
            if not rank
                rank=计算排名...
                MUlTI
                SET cache:rank, rank
                EXPIRE cache:rank, 7200
                EXEC
    
    
                                
    redis主从设置：
    在Redis中使用复制功能非常容易，只需要在从数据库的配置文件中加入“slaveof主数据库IP主数据库端口”即可，主数据库无需进行任何配置
        例如
            加任何参数来启动一个Redis实例作为主数据库：
                redis-server
            然后加上slaveof参数启动另一个Redis实例作为从数据库，并让其监听6380端口：
                redis-server --port 6380 --slaveof 127.0.0.1 6379
        此时在主数据库中的任何数据变化都会自动同步到从数据库中，在默认情况下从数据库是只读的，如果直接修改从数据库的数据会出现错误。
        可以通过设置从数据库的配置文件中的slave-read-only为no以使从数据库可写，但是对从数据库的任何更改都不会同步给任何其他数据库，
        并且一旦主数据库中更新了对应的数据就会覆盖从数据库中的改动。配置多台从数据库的方法也一样，在所有的从数据库的配置文件中都加上
        slaveof参数指向同一个主数据库即可。
        应用场景：
        （1）通过复制可以实现读写分离以提高服务器的负载能力。在常见的场景中，读的频率大于写，当单机的Redis无法应付大量的读请求时（尤其是
        较耗资源的请求，比如SORT命令等）可以通过复制功能建立多个从数据库，主数据库只进行写操作，而从数据库负责读操作。
        （2）另一个相对耗时的操作是持久化，为了提高性能，可以通过复制功能建立一个（或若干个）从数据库，并在从数据库中启用持久化，同时在主
        数据库禁用持久化。当从数据库崩溃时重启后主数据库会自动将数据同步过来，所以无需担心数据丢失。而当主数据库崩溃时，需要在从数据库中使
        用SLAVEOF NO ONE命令将从数据库提升成主数据库继续服务，并在原来的主数据库启动后使用SLAVEOF命令将其设置成新的主数据库的从数据库，即
        可将数据同步回来。
     
     redis安全：
         配置文件中修改bind参数，如只允许本机应用连接Redis，可以将bind参数改成：
                bind 127.0.0.1
    
    
